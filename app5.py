import streamlit as st
import random
import time
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Wedge, Circle
from matplotlib.figure import Figure
import base64
import os
import csv
import string
import shutil

# Thi·∫øt l·∫≠p trang
st.set_page_config(page_title="B·ªëc ThƒÉm B·∫£ng ƒê·∫•u / Draw Tournament Groups", layout="wide")

# Danh s√°ch 23 ƒë·ªôi thi ƒë·∫•u
all_teams = [
    "HSSE-HR", "ME", "QC 1", "RC - WOOD", "PACKING 1", "WH - MAINT", "PACKING 2", "FINISHING P1",
    "QC 2", "UPH 1", "UPH 2", "PROTOTYPE", "PANEL", "MACHINING P1", "INLAY", "ASSEMBLY P1",
    "ASSEMBLY P2", "MAC-PANEL P2", "WASHING - FITTING P2", "CARTLINE P2", "METAL WORK", "TECHNICAL FINISHING", "OFFLINE P2"
]

# T·ªáp l∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p
USER_FILE = "users.csv"
# T·ªáp l∆∞u k·∫øt qu·∫£ b·ªëc thƒÉm
RESULTS_FILE = "results.csv"

# Song ng·ªØ Vi·ªát-Anh
translations = {
    "app_title": {
        "vi": "üèÜ B·ªêC THƒÇM B·∫¢NG THI ƒê·∫§U GI·∫¢I B√ìNG ƒê√Å TRUY·ªÄN TH·ªêNG ROCHDALE SPEARS üèÜ",
        "en": "üèÜ OFFICIAL GROUP STAGE DRAW ‚Äì ROCHDALE SPEARS TRADITIONAL FOOTBALL TOURNAMENT 2025 üèÜ"
    },
    "results_tab": {
        "vi": "K·∫øt qu·∫£ b·ªëc thƒÉm",
        "en": "Draw Results"
    },
    "login_tab": {
        "vi": "ƒêƒÉng nh·∫≠p / B·ªëc thƒÉm",
        "en": "Login / Draw"
    },
    "draw_header": {
        "vi": "B·ªëc thƒÉm b·∫£ng thi ƒë·∫•u",
        "en": "Tournament Group Draw"
    },
    "remaining_teams": {
        "vi": "C√≤n l·∫°i",
        "en": "Remaining"
    },
    "teams": {
        "vi": "ƒë·ªôi",
        "en": "teams"
    },
    "drawn_teams": {
        "vi": "ƒê√£ b·ªëc thƒÉm",
        "en": "Drawn"
    },
    "select_team": {
        "vi": "Ch·ªçn ƒë·ªôi ƒë·ªÉ b·ªëc thƒÉm:",
        "en": "Select team to draw:"
    },
    "all_teams_drawn": {
        "vi": "ƒê√£ b·ªëc thƒÉm xong t·∫•t c·∫£ c√°c ƒë·ªôi!",
        "en": "All teams have been drawn!"
    },
    "team_already_drawn": {
        "vi": "ƒê·ªôi {} ƒë√£ b·ªëc thƒÉm r·ªìi!",
        "en": "Team {} has already been drawn!"
    },
    "will_draw_for": {
        "vi": "B·∫°n s·∫Ω b·ªëc thƒÉm cho ƒë·ªôi:",
        "en": "You will draw for team:"
    },
    "team_not_found": {
        "vi": "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªôi c·ªßa b·∫°n!",
        "en": "Your team information was not found!"
    },
    "draw_button": {
        "vi": "B·ªëc thƒÉm",
        "en": "Draw"
    },
    "reset_button": {
        "vi": "B·∫Øt ƒë·∫ßu l·∫°i",
        "en": "Reset"
    },
    "login_header": {
        "vi": "ƒêƒÉng nh·∫≠p ƒë·ªÉ b·ªëc thƒÉm",
        "en": "Login to draw"
    },
    "username_label": {
        "vi": "T√™n ƒë·ªôi/Username",
        "en": "Team name/Username"
    },
    "password_label": {
        "vi": "M·∫≠t kh·∫©u",
        "en": "Password"
    },
    "login_button": {
        "vi": "ƒêƒÉng nh·∫≠p",
        "en": "Login"
    },
    "login_error": {
        "vi": "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!",
        "en": "Incorrect username or password!"
    },
    "logged_in_as": {
        "vi": "ƒêƒÉng nh·∫≠p v·ªõi t√™n:",
        "en": "Logged in as:"
    },
    "logout_button": {
        "vi": "ƒêƒÉng xu·∫•t",
        "en": "Logout"
    },
    "spinning": {
        "vi": "ƒêang quay v√≤ng quay...",
        "en": "Spinning the wheel..."
    },
    "result": {
        "vi": "K·∫øt qu·∫£:",
        "en": "Result:"
    },
    "results_header": {
        "vi": "K·∫øt qu·∫£ b·ªëc thƒÉm",
        "en": "Draw Results"
    },
    "position": {
        "vi": "V·ªã tr√≠",
        "en": "Position"
    },
    "group": {
        "vi": "B·∫£ng",
        "en": "Group"
    },
    "reset_confirm": {
        "vi": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu l·∫°i? T·∫•t c·∫£ k·∫øt qu·∫£ b·ªëc thƒÉm s·∫Ω b·ªã x√≥a!",
        "en": "Are you sure you want to reset? All draw results will be deleted!"
    },
    "reset_success": {
        "vi": "ƒê√£ reset th√†nh c√¥ng! T·∫•t c·∫£ k·∫øt qu·∫£ b·ªëc thƒÉm ƒë√£ ƒë∆∞·ª£c x√≥a.",
        "en": "Reset successful! All draw results have been deleted."
    },
    "language": {
        "vi": "Ng√¥n ng·ªØ:",
        "en": "Language:"
    }
}

# H√†m l·∫•y vƒÉn b·∫£n theo ng√¥n ng·ªØ
def get_text(key, lang="vi"):
    return translations.get(key, {}).get(lang, key)

# H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
def generate_password(length=6):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

# H√†m t·∫°o file users.csv n·∫øu ch∆∞a t·ªìn t·∫°i
def create_users_file():
    if not os.path.exists(USER_FILE):
        with open(USER_FILE, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['username', 'password'])
            
            # T·∫°o ng∆∞·ªùi d√πng cho m·ªói ƒë·ªôi v·ªõi m·∫≠t kh·∫©u ng·∫´u nhi√™n
            for team in all_teams:
                password = generate_password()
                writer.writerow([team, password])
                
            # T·∫°o t√†i kho·∫£n admin
            admin_password = "admin123"
            writer.writerow(["admin", admin_password])
            
        st.success("ƒê√£ t·∫°o file users.csv v·ªõi th√¥ng tin ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ c√°c ƒë·ªôi!")
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒëƒÉng nh·∫≠p
        st.write("Th√¥ng tin ƒëƒÉng nh·∫≠p / Login information:")
        users_data = []
        with open(USER_FILE, mode='r') as file:
            reader = csv.reader(file)
            next(reader)  # B·ªè qua header
            for row in reader:
                if row[0] != "admin":  # Kh√¥ng hi·ªÉn th·ªã th√¥ng tin admin
                    users_data.append({"ƒê·ªôi / Team": row[0], "M·∫≠t kh·∫©u / Password": row[1]})
        
        st.table(pd.DataFrame(users_data))

# H√†m t·∫°o file results.csv n·∫øu ch∆∞a t·ªìn t·∫°i
def create_results_file():
    if not os.path.exists(RESULTS_FILE):
        with open(RESULTS_FILE, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['team', 'position'])

# H√†m ki·ªÉm tra ƒëƒÉng nh·∫≠p
def check_login(username, password):
    if not os.path.exists(USER_FILE):
        create_users_file()
        
    with open(USER_FILE, mode='r') as file:
        reader = csv.reader(file)
        next(reader)  # B·ªè qua header
        for row in reader:
            if row[0] == username and row[1] == password:
                return True
    return False

# H√†m l·∫•y danh s√°ch ƒë·ªôi ƒë√£ b·ªëc thƒÉm
def get_drawn_teams():
    if not os.path.exists(RESULTS_FILE):
        create_results_file()
        return []
        
    drawn_teams = []
    with open(RESULTS_FILE, mode='r') as file:
        reader = csv.reader(file)
        next(reader)  # B·ªè qua header
        for row in reader:
            drawn_teams.append(row[0])
    return drawn_teams

# H√†m l∆∞u k·∫øt qu·∫£ b·ªëc thƒÉm
def save_result(team, position):
    with open(RESULTS_FILE, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([team, position])

# H√†m l·∫•y k·∫øt qu·∫£ b·ªëc thƒÉm t·ª´ file
def get_results():
    if not os.path.exists(RESULTS_FILE):
        create_results_file()
        return {}
        
    results = {}
    with open(RESULTS_FILE, mode='r') as file:
        reader = csv.reader(file)
        next(reader)  # B·ªè qua header
        for row in reader:
            if len(row) >= 2:
                results[row[0]] = row[1]
    return results

# H√†m reset k·∫øt qu·∫£ b·ªëc thƒÉm (ch·ªâ admin)
def reset_results():
    # T·∫°o file results.csv m·ªõi
    with open(RESULTS_FILE, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['team', 'position'])
    
    # C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ c√≥ s·∫µn
    positions = []
    for group in ['A', 'B', 'C']:
        for i in range(1, 7):
            positions.append(f"{group}{i}")
    for i in range(1, 6):
        positions.append(f"D{i}")
    st.session_state.positions = positions
    st.session_state.available_positions = positions.copy()
    
    # Reset g√≥c quay
    st.session_state.wheel_angle = 0

# H√†m v·∫Ω v√≤ng quay may m·∫Øn v·ªõi g√≥c quay
def create_wheel(positions, angle=0):
    fig = Figure(figsize=(8, 8))
    ax = fig.add_subplot(111)
    
    # S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ tr√™n v√≤ng quay
    n = len(positions)
    
    # M√†u s·∫Øc cho c√°c ph·∫ßn t·ª≠
    colors = plt.cm.rainbow(np.linspace(0, 1, n))
    
    # V·∫Ω c√°c ph·∫ßn t·ª≠ tr√™n v√≤ng quay
    theta1 = angle  # B·∫Øt ƒë·∫ßu t·ª´ g√≥c quay hi·ªán t·∫°i
    theta2 = 360 / n
    
    wedges = []
    labels_pos = []
    
    for i in range(n):
        wedge = Wedge((0, 0), 0.9, theta1, theta1 + theta2, fc=colors[i])
        ax.add_patch(wedge)
        wedges.append(wedge)
        
        # Th√™m nh√£n
        mid_angle = np.radians((theta1 + theta1 + theta2) / 2)
        text_x = 0.5 * np.cos(mid_angle)
        text_y = 0.5 * np.sin(mid_angle)
        ax.text(text_x, text_y, positions[i], ha='center', va='center', fontsize=12, fontweight='bold')
        
        # L∆∞u v·ªã tr√≠ c·ªßa nh√£n ƒë·ªÉ x√°c ƒë·ªãnh k·∫øt qu·∫£
        labels_pos.append((mid_angle, positions[i]))
        
        theta1 += theta2
    
    # Th√™m v√≤ng tr√≤n ·ªü gi·ªØa
    center_circle = Circle((0, 0), 0.2, fc='white')
    ax.add_patch(center_circle)
    
    # Th√™m m≈©i t√™n ch·ªâ v·ªã tr√≠ (c·ªë ƒë·ªãnh ·ªü v·ªã tr√≠ tr√™n c√πng)
    ax.arrow(0, 0, 0, 1, head_width=0.1, head_length=0.1, fc='red', ec='red')
    
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    ax.set_aspect('equal')
    ax.axis('off')
    
    return fig, labels_pos

# H√†m x√°c ƒë·ªãnh v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn d·ª±a tr√™n g√≥c quay
def get_selected_position(labels_pos, angle):
    # Chuy·ªÉn ƒë·ªïi g√≥c quay sang radian
    angle_rad = np.radians(angle)
    
    # ƒêi·ªÅu ch·ªânh g√≥c ƒë·ªÉ ph√π h·ª£p v·ªõi h·ªá t·ªça ƒë·ªô c·ªßa matplotlib
    adjusted_angle = (angle_rad - np.pi/2) % (2*np.pi)
    
    # T√¨m v·ªã tr√≠ g·∫ßn nh·∫•t v·ªõi m≈©i t√™n (tr√™n c√πng)
    arrow_angle = 0  # V√¨ ƒë√£ ƒëi·ªÅu ch·ªânh g√≥c
    
    # T√¨m v·ªã tr√≠ c√≥ g√≥c g·∫ßn v·ªõi m≈©i t√™n nh·∫•t
    min_diff = float('inf')
    selected_position = None
    
    for pos_angle, position in labels_pos:
        # ƒêi·ªÅu ch·ªânh g√≥c c·ªßa v·ªã tr√≠
        adjusted_pos_angle = (pos_angle - np.pi/2) % (2*np.pi)
        
        # T√≠nh kho·∫£ng c√°ch g√≥c
        diff = min((adjusted_pos_angle - arrow_angle) % (2*np.pi), 
                   (arrow_angle - adjusted_pos_angle) % (2*np.pi))
        
        if diff < min_diff:
            min_diff = diff
            selected_position = position
    
    return selected_position

# H√†m c·∫≠p nh·∫≠t b·∫£ng k·∫øt qu·∫£
def update_result_table():
    # Kh·ªüi t·∫°o b·∫£ng k·∫øt qu·∫£ tr·ªëng
    result_table = {
        'A': [None] * 6,  # 6 v·ªã tr√≠ cho b·∫£ng A
        'B': [None] * 6,  # 6 v·ªã tr√≠ cho b·∫£ng B
        'C': [None] * 6,  # 6 v·ªã tr√≠ cho b·∫£ng C
        'D': [None] * 5,  # 5 v·ªã tr√≠ cho b·∫£ng D
    }
    
    # L·∫•y k·∫øt qu·∫£ t·ª´ file
    results = get_results()
    
    # C·∫≠p nh·∫≠t b·∫£ng k·∫øt qu·∫£
    for team, position in results.items():
        group = position[0]  # L·∫•y ch·ªØ c√°i ƒë·∫ßu (A, B, C, D)
        index = int(position[1:]) - 1  # L·∫•y s·ªë (0-based index)
        result_table[group][index] = team
    
    return result_table

# H√†m t·∫°o HTML ƒë·ªÉ ph√°t √¢m thanh
def autoplay_audio(url):
    audio_html = f"""
        <audio id="wheelAudio" autoplay loop>
            <source src="{url}" type="audio/ogg">
            Your browser does not support the audio element.
        </audio>
        <script>
            var audio = document.getElementById("wheelAudio");
            audio.volume = 0.5;  // ƒê·∫∑t √¢m l∆∞·ª£ng ·ªü m·ª©c 50%
        </script>
    """
    return audio_html

# H√†m d·ª´ng √¢m thanh
def stop_audio():
    stop_html = """
        <script>
            var audio = document.getElementById("wheelAudio");
            if (audio) {
                audio.pause();
                audio.currentTime = 0;
            }
        </script>
    """
    return stop_html

# H√†m hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
def display_result_table(result_table, lang="vi"):
    st.header(get_text("results_header", lang))
    
    # T·∫°o HTML cho b·∫£ng
    table_html = '<table class="styled-table"><thead><tr>'
    table_html += f'<th>{get_text("position", lang)}</th><th>{get_text("group", lang)} A</th><th>{get_text("group", lang)} B</th><th>{get_text("group", lang)} C</th><th>{get_text("group", lang)} D</th>'
    table_html += '</tr></thead><tbody>'
    
    # Th√™m d·ªØ li·ªáu v√†o b·∫£ng
    for i in range(6):
        table_html += '<tr>'
        table_html += f'<td class="header-cell">{i+1}</td>'
        
        # B·∫£ng A
        cell_value = result_table['A'][i] if i < len(result_table['A']) and result_table['A'][i] is not None else ""
        cell_class = "empty-cell" if cell_value == "" else ""
        cell_content = cell_value if cell_value != "" else "_____"
        table_html += f'<td class="{cell_class}">{cell_content}</td>'
        
        # B·∫£ng B
        cell_value = result_table['B'][i] if i < len(result_table['B']) and result_table['B'][i] is not None else ""
        cell_class = "empty-cell" if cell_value == "" else ""
        cell_content = cell_value if cell_value != "" else "_____"
        table_html += f'<td class="{cell_class}">{cell_content}</td>'
        
        # B·∫£ng C
        cell_value = result_table['C'][i] if i < len(result_table['C']) and result_table['C'][i] is not None else ""
        cell_class = "empty-cell" if cell_value == "" else ""
        cell_content = cell_value if cell_value != "" else "_____"
        table_html += f'<td class="{cell_class}">{cell_content}</td>'
        
        # B·∫£ng D (ch·ªâ c√≥ 5 v·ªã tr√≠)
        if i < 5:
            cell_value = result_table['D'][i] if i < len(result_table['D']) and result_table['D'][i] is not None else ""
            cell_class = "empty-cell" if cell_value == "" else ""
            cell_content = cell_value if cell_value != "" else "_____"
            table_html += f'<td class="{cell_class}">{cell_content}</td>'
        else:
            # V·ªã tr√≠ kh√¥ng t·ªìn t·∫°i trong b·∫£ng D
            table_html += '<td class="empty-cell" style="background-color: #e0e0e0;">---</td>'
        
        table_html += '</tr>'
    
    table_html += '</tbody></table>'
    
    # Hi·ªÉn th·ªã b·∫£ng
    st.markdown(table_html, unsafe_allow_html=True)

# CSS ƒë·ªÉ t·∫°o b·∫£ng ƒë·∫πp m·∫Øt h∆°n
css = """
<style>
    .styled-table {
        width: 100%;
        border-collapse: collapse;
        margin: 25px 0;
        font-size: 18px;
        font-family: sans-serif;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }
    .styled-table thead tr {
        background-color: #009879;
        color: white;
        text-align: center;
    }
    .styled-table th,
    .styled-table td {
        padding: 12px 15px;
        text-align: center;
        border: 1px solid #dddddd;
    }
    .styled-table tbody tr {
        border-bottom: 1px solid #dddddd;
    }
    .styled-table tbody tr:nth-of-type(even) {
        background-color: #f3f3f3;
    }
    .styled-table tbody tr:last-of-type {
        border-bottom: 2px solid #009879;
    }
    .empty-cell {
        color: #999;
        font-style: italic;
    }
    .header-cell {
        font-weight: bold;
        background-color: #f0f0f0;
    }
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }
    .login-header {
        text-align: center;
        margin-bottom: 20px;
    }
    .tabs-container {
        margin-bottom: 20px;
    }
    .language-selector {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 10px;
    }
    .language-selector label {
        margin-right: 10px;
    }
</style>
"""

# Hi·ªÉn th·ªã CSS
st.markdown(css, unsafe_allow_html=True)

# ƒê·∫£m b·∫£o c√°c file c·∫ßn thi·∫øt t·ªìn t·∫°i
create_users_file()
create_results_file()

# Kh·ªüi t·∫°o session state
if 'positions' not in st.session_state:
    # T·∫°o t·∫•t c·∫£ c√°c v·ªã tr√≠ c√≥ th·ªÉ
    positions = []
    for group in ['A', 'B', 'C']:
        for i in range(1, 7):
            positions.append(f"{group}{i}")
    for i in range(1, 6):
        positions.append(f"D{i}")
    st.session_state.positions = positions

if 'available_positions' not in st.session_state:
    # L·∫•y v·ªã tr√≠ ƒë√£ ƒë∆∞·ª£c b·ªëc thƒÉm
    results = get_results()
    used_positions = list(results.values())
    
    # T√≠nh to√°n v·ªã tr√≠ c√≤n l·∫°i
    st.session_state.available_positions = [pos for pos in st.session_state.positions if pos not in used_positions]

if 'spinning' not in st.session_state:
    st.session_state.spinning = False

if 'wheel_angle' not in st.session_state:
    st.session_state.wheel_angle = 0

if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    
if 'username' not in st.session_state:
    st.session_state.username = ""

if 'language' not in st.session_state:
    st.session_state.language = "vi"

# Ch·ªçn ng√¥n ng·ªØ
with st.container():
    col1, col2 = st.columns([6, 1])
    with col2:
        st.markdown('<div class="language-selector">', unsafe_allow_html=True)
        st.write(get_text("language", st.session_state.language))
        language = st.selectbox(
            label="",
            options=["vi", "en"],
            index=0 if st.session_state.language == "vi" else 1,
            format_func=lambda x: "Ti·∫øng Vi·ªát" if x == "vi" else "English",
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        if language != st.session_state.language:
            st.session_state.language = language
            st.rerun()

# Placeholder cho audio
audio_placeholder = st.empty()

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title(get_text("app_title", st.session_state.language))

# T·∫°o tabs
tab1, tab2 = st.tabs([
    get_text("results_tab", st.session_state.language), 
    get_text("login_tab", st.session_state.language)
])

# Tab 1: K·∫øt qu·∫£ b·ªëc thƒÉm (hi·ªÉn th·ªã cho t·∫•t c·∫£ ng∆∞·ªùi d√πng)
with tab1:
    # C·∫≠p nh·∫≠t b·∫£ng k·∫øt qu·∫£
    result_table = update_result_table()
    
    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
    display_result_table(result_table, st.session_state.language)
    
    # Hi·ªÉn th·ªã s·ªë ƒë·ªôi ƒë√£ b·ªëc thƒÉm
    drawn_teams = get_drawn_teams()
    st.info(f"{get_text('drawn_teams', st.session_state.language)}: {len(drawn_teams)}/23 {get_text('teams', st.session_state.language)}")

# Tab 2: ƒêƒÉng nh·∫≠p v√† b·ªëc thƒÉm
with tab2:
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if not st.session_state.logged_in:
        # Form ƒëƒÉng nh·∫≠p
        with st.container():
            st.markdown('<div class="login-container">', unsafe_allow_html=True)
            st.markdown(f'<h2 class="login-header">{get_text("login_header", st.session_state.language)}</h2>', unsafe_allow_html=True)
            
            username = st.text_input(get_text("username_label", st.session_state.language))
            password = st.text_input(get_text("password_label", st.session_state.language), type="password")
            
            if st.button(get_text("login_button", st.session_state.language)):
                if check_login(username, password):
                    st.session_state.logged_in = True
                    st.session_state.username = username
                    st.rerun()
                else:
                    st.error(get_text("login_error", st.session_state.language))
            
            st.markdown('</div>', unsafe_allow_html=True)
    else:
        # ƒê√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã giao di·ªán b·ªëc thƒÉm
        
        # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p
        st.sidebar.success(f"{get_text('logged_in_as', st.session_state.language)} {st.session_state.username}")
        
        # N√∫t ƒëƒÉng xu·∫•t
        if st.sidebar.button(get_text("logout_button", st.session_state.language)):
            for key in ['logged_in', 'username']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        
        # N√∫t reset (ch·ªâ hi·ªÉn th·ªã cho admin)
        if st.session_state.username == "admin":
            if st.sidebar.button(get_text("reset_button", st.session_state.language)):
                reset_confirm = st.sidebar.warning(get_text("reset_confirm", st.session_state.language))
                if st.sidebar.button("Confirm Reset", key="confirm_reset"):
                    reset_results()
                    st.sidebar.success(get_text("reset_success", st.session_state.language))
                    st.rerun()
        
        # L·∫•y danh s√°ch ƒë·ªôi ƒë√£ b·ªëc thƒÉm
        drawn_teams = get_drawn_teams()
        
        # Container: Ph·∫ßn b·ªëc thƒÉm
        with st.container():
            st.header(get_text("draw_header", st.session_state.language))
            
            # Hi·ªÉn th·ªã s·ªë ƒë·ªôi c√≤n l·∫°i c·∫ßn b·ªëc thƒÉm
            st.subheader(f"{get_text('remaining_teams', st.session_state.language)}: {23 - len(drawn_teams)}/23 {get_text('teams', st.session_state.language)}")
            
            # Chia c·ªôt cho ph·∫ßn ƒëi·ªÅu khi·ªÉn
            control_col1, control_col2 = st.columns([3, 1])
            
            with control_col1:
                # Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i l√† admin kh√¥ng
                is_admin = (st.session_state.username == "admin")
                
                if is_admin:
                    # Admin c√≥ th·ªÉ ch·ªçn b·∫•t k·ª≥ ƒë·ªôi n√†o ch∆∞a b·ªëc thƒÉm
                    available_teams = [team for team in all_teams if team not in drawn_teams]
                    if available_teams:
                        selected_team = st.selectbox(get_text("select_team", st.session_state.language), available_teams)
                    else:
                        st.success(get_text("all_teams_drawn", st.session_state.language))
                        selected_team = None
                else:
                    # Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng ch·ªâ c√≥ th·ªÉ b·ªëc thƒÉm cho ƒë·ªôi c·ªßa m√¨nh
                    team_name = st.session_state.username
                    
                    if team_name in drawn_teams:
                        st.warning(get_text("team_already_drawn", st.session_state.language).format(team_name))
                        selected_team = None
                    elif team_name in all_teams:
                        st.info(f"{get_text('will_draw_for', st.session_state.language)} {team_name}")
                        selected_team = team_name
                    else:
                        st.error(get_text("team_not_found", st.session_state.language))
                        selected_team = None
            
            with control_col2:
                # N√∫t b·ªëc thƒÉm
                can_draw = (selected_team is not None and 
                           (is_admin or (selected_team not in drawn_teams)))
                
                if can_draw and st.button(get_text("draw_button", st.session_state.language), use_container_width=True):
                    st.session_state.spinning = True
                    st.session_state.current_team = selected_team
                    st.rerun()

        # Container: V√≤ng xoay v√† k·∫øt qu·∫£ b·ªëc thƒÉm
        with st.container():
            # Hi·ªÉn th·ªã v√≤ng quay may m·∫Øn
            wheel_container = st.empty()
            result_container = st.empty()
            
            if st.session_state.spinning and st.session_state.available_positions:
                # Ph√°t √¢m thanh khi quay
                audio_url = "https://vongquaymayman.co/wp-content/themes/twentytwentythree-child/assets/sound/chiecnonkydieu.ogg"
                audio_placeholder.markdown(autoplay_audio(audio_url), unsafe_allow_html=True)
                
                with st.spinner(get_text("spinning", st.session_state.language)):
                    # Hi·ªáu ·ª©ng quay
                    progress_bar = st.progress(0)
                    
                    # S·ªë v√≤ng quay v√† th·ªùi gian quay
                    total_spins = 20  # T·ªïng s·ªë b∆∞·ªõc quay
                    spin_duration = 2  # Th·ªùi gian quay (gi√¢y)
                    
                    # Ch·ªçn v·ªã tr√≠ ng·∫´u nhi√™n b·∫±ng c√°ch x√°c ƒë·ªãnh g√≥c d·ª´ng
                    # T√≠nh g√≥c cho m·ªói v·ªã tr√≠
                    n = len(st.session_state.available_positions)
                    segment_angle = 360 / n
                    
                    # Ch·ªçn m·ªôt v·ªã tr√≠ ng·∫´u nhi√™n
                    random_index = random.randint(0, n - 1)
                    
                    # T√≠nh g√≥c d·ª´ng ƒë·ªÉ m≈©i t√™n ch·ªâ v√†o v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn
                    # G√≥c d·ª´ng = g√≥c b·∫Øt ƒë·∫ßu c·ªßa ph·∫ßn t·ª≠ + m·ªôt n·ª≠a g√≥c c·ªßa ph·∫ßn t·ª≠ + s·ªë v√≤ng quay ng·∫´u nhi√™n
                    target_angle = random_index * segment_angle + segment_angle / 2
                    target_angle += random.randint(5, 10) * 360  # Th√™m m·ªôt s·ªë v√≤ng quay ng·∫´u nhi√™n
                    
                    # T·∫°o danh s√°ch c√°c g√≥c quay
                    angles = []
                    current_angle = st.session_state.wheel_angle
                    
                    # T·∫°o hi·ªáu ·ª©ng quay v·ªõi t·ªëc ƒë·ªô gi·∫£m d·∫ßn
                    for i in range(total_spins):
                        # T√≠nh g√≥c quay cho m·ªói b∆∞·ªõc
                        progress = i / total_spins
                        
                        # S·ª≠ d·ª•ng h√†m easeOutCubic ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng ch·∫≠m d·∫ßn
                        t = 1 - (1 - progress) ** 3
                        
                        # G√≥c quay hi·ªán t·∫°i
                        current_angle = current_angle + (target_angle - current_angle) * t
                        angles.append(current_angle % 360)
                    
                    # Th·ª±c hi·ªán quay
                    labels_pos = None
                    for i, angle in enumerate(angles):
                        # V·∫Ω v√≤ng quay v·ªõi g√≥c hi·ªán t·∫°i
                        fig, labels_pos = create_wheel(st.session_state.available_positions, angle)
                        wheel_container.pyplot(fig)
                        
                        # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                        progress_bar.progress(int((i + 1) / total_spins * 100))
                        
                        # T·∫°m d·ª´ng ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng
                        time.sleep(spin_duration / total_spins)
                    
                    # L∆∞u g√≥c quay cu·ªëi c√πng
                    st.session_state.wheel_angle = angles[-1] % 360
                    
                    # X√°c ƒë·ªãnh v·ªã tr√≠ ƒë∆∞·ª£c ch·ªçn d·ª±a tr√™n g√≥c quay cu·ªëi c√πng
                    selected_position = get_selected_position(labels_pos, st.session_state.wheel_angle)
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o file
                    save_result(st.session_state.current_team, selected_position)
                    
                    # C·∫≠p nh·∫≠t danh s√°ch v·ªã tr√≠ c√≤n l·∫°i
                    st.session_state.available_positions.remove(selected_position)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    result_container.success(f"{get_text('result', st.session_state.language)} {st.session_state.current_team} ‚Üí {selected_position}")
                    
                    # K·∫øt th√∫c quay v√† d·ª´ng √¢m thanh
                    audio_placeholder.markdown(stop_audio(), unsafe_allow_html=True)
                    st.session_state.spinning = False
            else:
                # Hi·ªÉn th·ªã v√≤ng quay tƒ©nh
                if st.session_state.available_positions:
                    fig, _ = create_wheel(st.session_state.available_positions, st.session_state.wheel_angle)
                    wheel_container.pyplot(fig)
